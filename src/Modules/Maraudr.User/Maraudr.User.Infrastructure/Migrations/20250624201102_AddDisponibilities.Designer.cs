// <auto-generated />
using System;
using Maraudr.User.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Maraudr.User.Infrastructure.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250624201102_AddDisponibilities")]
    partial class AddDisponibilities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Tokens.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Tokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("RevokedReason")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.AbstractUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Manager");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[0]);

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("AbstractUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Maraudr.User.Domain.ValueObjects.Users.Disponibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssociationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Disponibilities", (string)null);
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.Manager", b =>
                {
                    b.HasBaseType("Maraudr.User.Domain.Entities.Users.AbstractUser");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.User", b =>
                {
                    b.HasBaseType("Maraudr.User.Domain.Entities.Users.AbstractUser");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.HasIndex("ManagerId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Tokens.PasswordResetToken", b =>
                {
                    b.HasOne("Maraudr.User.Domain.Entities.Users.AbstractUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Tokens.RefreshToken", b =>
                {
                    b.HasOne("Maraudr.User.Domain.Entities.Users.AbstractUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.AbstractUser", b =>
                {
                    b.OwnsOne("Maraudr.User.Domain.ValueObjects.Users.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AbstractUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AbstractUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("AbstractUserId");
                        });

                    b.OwnsOne("Maraudr.User.Domain.ValueObjects.Users.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("AbstractUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AbstractUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("AbstractUserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Maraudr.User.Domain.ValueObjects.Users.Disponibility", b =>
                {
                    b.HasOne("Maraudr.User.Domain.Entities.Users.AbstractUser", null)
                        .WithMany("Disponibilities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Maraudr.User.Domain.Entities.Users.Manager", "Manager")
                        .WithMany("EFTeam")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.AbstractUser", b =>
                {
                    b.Navigation("Disponibilities");
                });

            modelBuilder.Entity("Maraudr.User.Domain.Entities.Users.Manager", b =>
                {
                    b.Navigation("EFTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
