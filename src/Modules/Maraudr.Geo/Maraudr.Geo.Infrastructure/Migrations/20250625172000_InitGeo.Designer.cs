// <auto-generated />
using System;
using Maraudr.Geo.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Maraudr.Geo.Infrastructure.Migrations
{
    [DbContext(typeof(GeoContext))]
    [Migration("20250625172000_InitGeo")]
    partial class InitGeo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Maraudr.Geo.Domain.Entities.GeoData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeoStoreId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("ObservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GeoStoreId");

                    b.ToTable("GeoEvents");
                });

            modelBuilder.Entity("Maraudr.Geo.Domain.Entities.GeoStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssociationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GeoStores");
                });

            modelBuilder.Entity("Maraudr.Geo.Domain.Entities.GeoData", b =>
                {
                    b.HasOne("Maraudr.Geo.Domain.Entities.GeoStore", "GeoStore")
                        .WithMany("GeoEvents")
                        .HasForeignKey("GeoStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeoStore");
                });

            modelBuilder.Entity("Maraudr.Geo.Domain.Entities.GeoStore", b =>
                {
                    b.Navigation("GeoEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
